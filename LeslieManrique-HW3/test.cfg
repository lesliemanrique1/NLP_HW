#The following worked (1) 
my_grammar = nltk.CFG.fromstring("""
S -> NP VP | S C S | VP
PP -> P NP
NP -> Det NP | Det N PP | 'I' | 'We' | Det NP C NP | Det Adj N | NP PP | AdjP NP | NP NP|N
AdjP -> Adj | Adv Adj
Adj -> 'different' |'arbitrary' |'one'
Adv -> 'not' |'markedly'|'can'|'to'
VP -> V NP | VP PP | V S| V NP |V Adv | Adv V| VP AdjP |VP VP 
PP -> P NP
Det -> 'an' | 'my' | 'that'
N -> 'elephant' | 'pajamas' | 'use' |'types' |'species'|'subspecies'|'modulation'|'howl' |'things' |'population' |'another'
V -> 'shot' | 'found' | 'showed' |'indicating'|'is'|'be'|'used'|'distinguish' 
P -> 'in'|'from'
C -> 'and'|'but' 
P -> 'of'

""")


#------------------------------------------------------------------------------------------------------------------------------------------
#Also Works (2)  Includes SBAR but too many different parsings 

my_grammar = nltk.CFG.fromstring("""
S -> NP VP | S C S | VP
PP -> P NP
NP -> Det NP | Det N PP |'We' | NP C NP | Det Adj N | NP PP | AdjP NP | NP NP | N
AdjP -> Adj | Adv Adj
Adj -> 'different' |'arbitrary' |'one'
Adv -> 'not' |'markedly'
Aux -> 'can' | 'to' 
VP ->|V SBAR| V S| V NP | VP PP | V NP | V AdjP |Aux VP | V VP | V 
PP -> P NP
Det -> 'an' | 'my' 
N -> 'elephant' | 'pajamas' | 'use' |'types' |'species'|'subspecies'|'modulation'|'howl' |'things' |'population' |'another'
V -> 'shot' | 'found' | 'showed' |'indicating'|'is'|'be'|'used'|'distinguish' 
P -> 'in'|'from'
C -> 'and'|'but' 
P -> 'of'
SBAR -> IN S 
IN -> 'that'


""")

#----------------------------------------------------------------------------------------------------------------------------
my_grammar = nltk.CFG.fromstring("""
S -> NP VP 
PP -> P NP
NP -> Det N | Det N PP | 'I' | 'We' | Det NP C NP | Det Adj N | N PP | Adj N | N
Adj -> 'different' | 'howl'
VP -> V NP | VP PP | V S
PP -> P NP
Det -> 'an' | 'my' | 'that'
N -> 'elephant' | 'pajamas' | 'use' |'types' |'species'|'subspecies'
V -> 'shot' | 'found' | 'showed' 
P -> 'in'
C -> 'and'
P -> 'of'
""")

my_grammar = nltk.CFG.fromstring("""
S -> NP VP
PP -> P NP
NP -> Det NP | Det N PP | 'I' | 'We' | Det NP C NP | Det Adj N | NP PP | AdjP NP | NP NP | N
AdjP -> Adj | Adv Adj
Adj -> 'different' |'arbitrary' 
Adv -> 'not' |'markedly'
VP -> V NP | VP PP | V S| V NP |V Adv | VP AdjP
PP -> P NP
Det -> 'an' | 'my' | 'that'
N -> 'elephant' | 'pajamas' | 'use' |'types' |'species'|'subspecies'|'modulation'|'howl' 
V -> 'shot' | 'found' | 'showed' |'indicating'|'is'
P -> 'in'
C -> 'and'
P -> 'of'

""")




my_grammar = nltk.CFG.fromstring("""
S -> NP VP
PP -> P NP
NP -> Det N | Det N PP | 'I' | 'We' | Det NP C NP | Det Adj N | N PP | Adj N | N
Adj -> 'different' | 'howl'
VP -> V NP | VP PP | V S
PP -> P NP
Det -> 'an' | 'my' | 'that'
N -> 'elephant' | 'pajamas' | 'use' |'types' |'species'|'subspecies'|'modulation'
V -> 'shot' | 'found' | 'showed'|'indicating'|
P -> 'in'
C -> 'and'
P -> 'of'
""")

my_grammar = nltk.CFG.fromstring("""
S -> NP VP
PP -> P NP
NP -> Det N | Det N PP | 'I' | 'We' | Det NP C NP | Det Adj N | N PP | Adj N | N | AP N
AP -> Adv Adj 
Adv -> 'markedly' 
Adj -> 'different' | 'howl'
VP -> V NP | VP PP | V S
PP -> P NP
Det -> 'an' | 'my' | 'that'
N -> 'elephant' | 'pajamas' | 'use' |'types' |'species'|'subspecies'
V -> 'shot' | 'found' | 'showed'
P -> 'in'
C -> 'and'
P -> 'of'
""")